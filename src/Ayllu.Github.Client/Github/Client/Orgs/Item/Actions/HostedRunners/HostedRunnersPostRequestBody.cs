// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class HostedRunnersPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Whether this runner should be created with a static public IP. Note limit on account. To list limits on account, use `GET actions/hosted-runners/limits`</summary>
        public bool? EnableStaticIp { get; set; }
        /// <summary>The image of runner. To list all available images, use `GET /actions/hosted-runners/images/github-owned` or `GET /actions/hosted-runners/images/partner`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersPostRequestBody_image? Image { get; set; }
#nullable restore
#else
        public global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersPostRequestBody_image Image { get; set; }
#endif
        /// <summary>The maximum amount of runners to scale up to. Runners will not auto-scale above this number. Use this setting to limit your cost.</summary>
        public int? MaximumRunners { get; set; }
        /// <summary>Name of the runner. Must be between 1 and 64 characters and may only contain upper and lowercase letters a-z, numbers 0-9, &apos;.&apos;, &apos;-&apos;, and &apos;_&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The existing runner group to add this runner to.</summary>
        public int? RunnerGroupId { get; set; }
        /// <summary>The machine size of the runner. To list available sizes, use `GET actions/hosted-runners/machine-sizes`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Size { get; set; }
#nullable restore
#else
        public string Size { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersPostRequestBody"/> and sets the default values.
        /// </summary>
        public HostedRunnersPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "enable_static_ip", n => { EnableStaticIp = n.GetBoolValue(); } },
                { "image", n => { Image = n.GetObjectValue<global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersPostRequestBody_image>(global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersPostRequestBody_image.CreateFromDiscriminatorValue); } },
                { "maximum_runners", n => { MaximumRunners = n.GetIntValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "runner_group_id", n => { RunnerGroupId = n.GetIntValue(); } },
                { "size", n => { Size = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("enable_static_ip", EnableStaticIp);
            writer.WriteObjectValue<global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersPostRequestBody_image>("image", Image);
            writer.WriteIntValue("maximum_runners", MaximumRunners);
            writer.WriteStringValue("name", Name);
            writer.WriteIntValue("runner_group_id", RunnerGroupId);
            writer.WriteStringValue("size", Size);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
