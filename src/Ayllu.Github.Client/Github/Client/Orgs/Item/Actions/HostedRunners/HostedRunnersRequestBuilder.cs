// <auto-generated/>
#pragma warning disable CS0618
using Ayllu.Github.Client.Models;
using Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.Images;
using Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.Item;
using Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.Limits;
using Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.MachineSizes;
using Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.Platforms;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners
{
    /// <summary>
    /// Builds and executes requests for operations under \orgs\{org}\actions\hosted-runners
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class HostedRunnersRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The images property</summary>
        public global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.Images.ImagesRequestBuilder Images
        {
            get => new global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.Images.ImagesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The limits property</summary>
        public global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.Limits.LimitsRequestBuilder Limits
        {
            get => new global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.Limits.LimitsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The machineSizes property</summary>
        public global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.MachineSizes.MachineSizesRequestBuilder MachineSizes
        {
            get => new global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.MachineSizes.MachineSizesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The platforms property</summary>
        public global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.Platforms.PlatformsRequestBuilder Platforms
        {
            get => new global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.Platforms.PlatformsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Ayllu.Github.Client.orgs.item.actions.hostedRunners.item collection</summary>
        /// <param name="position">Unique identifier of the GitHub-hosted runner.</param>
        /// <returns>A <see cref="global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.Item.WithHosted_runner_ItemRequestBuilder"/></returns>
        public global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.Item.WithHosted_runner_ItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("hosted_runner_id", position);
                return new global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.Item.WithHosted_runner_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the Ayllu.Github.Client.orgs.item.actions.hostedRunners.item collection</summary>
        /// <param name="position">Unique identifier of the GitHub-hosted runner.</param>
        /// <returns>A <see cref="global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.Item.WithHosted_runner_ItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.Item.WithHosted_runner_ItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("hosted_runner_id", position);
                return new global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.Item.WithHosted_runner_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public HostedRunnersRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/orgs/{org}/actions/hosted-runners{?page*,per_page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public HostedRunnersRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/orgs/{org}/actions/hosted-runners{?page*,per_page*}", rawUrl)
        {
        }
        /// <summary>
        /// Lists all GitHub-hosted runners configured in an organization.OAuth app tokens and personal access tokens (classic) need the `manage_runner:org` scope to use this endpoint.
        /// API method documentation <see href="https://docs.github.com/rest/actions/hosted-runners#list-github-hosted-runners-for-an-organization" />
        /// </summary>
        /// <returns>A <see cref="global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersGetResponse?> GetAsHostedRunnersGetResponseAsync(Action<RequestConfiguration<global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersRequestBuilder.HostedRunnersRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersGetResponse> GetAsHostedRunnersGetResponseAsync(Action<RequestConfiguration<global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersRequestBuilder.HostedRunnersRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersGetResponse>(requestInfo, global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Lists all GitHub-hosted runners configured in an organization.OAuth app tokens and personal access tokens (classic) need the `manage_runner:org` scope to use this endpoint.
        /// API method documentation <see href="https://docs.github.com/rest/actions/hosted-runners#list-github-hosted-runners-for-an-organization" />
        /// </summary>
        /// <returns>A <see cref="global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsHostedRunnersGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersResponse?> GetAsync(Action<RequestConfiguration<global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersRequestBuilder.HostedRunnersRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersResponse> GetAsync(Action<RequestConfiguration<global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersRequestBuilder.HostedRunnersRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersResponse>(requestInfo, global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creates a GitHub-hosted runner for an organization.OAuth tokens and personal access tokens (classic) need the `manage_runners:org` scope to use this endpoint.
        /// API method documentation <see href="https://docs.github.com/rest/actions/hosted-runners#create-a-github-hosted-runner-for-an-organization" />
        /// </summary>
        /// <returns>A <see cref="global::Ayllu.Github.Client.Models.ActionsHostedRunner"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Ayllu.Github.Client.Models.ActionsHostedRunner?> PostAsync(global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Ayllu.Github.Client.Models.ActionsHostedRunner> PostAsync(global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::Ayllu.Github.Client.Models.ActionsHostedRunner>(requestInfo, global::Ayllu.Github.Client.Models.ActionsHostedRunner.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Lists all GitHub-hosted runners configured in an organization.OAuth app tokens and personal access tokens (classic) need the `manage_runner:org` scope to use this endpoint.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersRequestBuilder.HostedRunnersRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersRequestBuilder.HostedRunnersRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates a GitHub-hosted runner for an organization.OAuth tokens and personal access tokens (classic) need the `manage_runners:org` scope to use this endpoint.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Lists all GitHub-hosted runners configured in an organization.OAuth app tokens and personal access tokens (classic) need the `manage_runner:org` scope to use this endpoint.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class HostedRunnersRequestBuilderGetQueryParameters 
        {
            /// <summary>The page number of the results to fetch. For more information, see &quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).&quot;</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>The number of results per page (max 100). For more information, see &quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).&quot;</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class HostedRunnersRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Ayllu.Github.Client.Orgs.Item.Actions.HostedRunners.HostedRunnersRequestBuilder.HostedRunnersRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class HostedRunnersRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
