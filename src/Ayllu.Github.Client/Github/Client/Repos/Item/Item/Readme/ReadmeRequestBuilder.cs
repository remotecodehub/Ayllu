// <auto-generated/>
#pragma warning disable CS0618
using Ayllu.Github.Client.Models;
using Ayllu.Github.Client.Repos.Item.Item.Readme.Item;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Ayllu.Github.Client.Repos.Item.Item.Readme
{
    /// <summary>
    /// Builds and executes requests for operations under \repos\{owner-id}\{repo-id}\readme
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ReadmeRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Ayllu.Github.Client.repos.item.item.readme.item collection</summary>
        /// <param name="position">The alternate path to look for a README file</param>
        /// <returns>A <see cref="global::Ayllu.Github.Client.Repos.Item.Item.Readme.Item.WithDirItemRequestBuilder"/></returns>
        public global::Ayllu.Github.Client.Repos.Item.Item.Readme.Item.WithDirItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("dir", position);
                return new global::Ayllu.Github.Client.Repos.Item.Item.Readme.Item.WithDirItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Ayllu.Github.Client.Repos.Item.Item.Readme.ReadmeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ReadmeRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/repos/{owner%2Did}/{repo%2Did}/readme{?ref*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Ayllu.Github.Client.Repos.Item.Item.Readme.ReadmeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ReadmeRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/repos/{owner%2Did}/{repo%2Did}/readme{?ref*}", rawUrl)
        {
        }
        /// <summary>
        /// Gets the preferred README for a repository.This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;- **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media type.- **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub&apos;s open-source [Markup library](https://github.com/github/markup).
        /// API method documentation <see href="https://docs.github.com/rest/repos/contents#get-a-repository-readme" />
        /// </summary>
        /// <returns>A <see cref="global::Ayllu.Github.Client.Models.ContentFile"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Ayllu.Github.Client.Models.BasicError">When receiving a 404 status code</exception>
        /// <exception cref="global::Ayllu.Github.Client.Models.ValidationError">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Ayllu.Github.Client.Models.ContentFile?> GetAsync(Action<RequestConfiguration<global::Ayllu.Github.Client.Repos.Item.Item.Readme.ReadmeRequestBuilder.ReadmeRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Ayllu.Github.Client.Models.ContentFile> GetAsync(Action<RequestConfiguration<global::Ayllu.Github.Client.Repos.Item.Item.Readme.ReadmeRequestBuilder.ReadmeRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "404", global::Ayllu.Github.Client.Models.BasicError.CreateFromDiscriminatorValue },
                { "422", global::Ayllu.Github.Client.Models.ValidationError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Ayllu.Github.Client.Models.ContentFile>(requestInfo, global::Ayllu.Github.Client.Models.ContentFile.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Gets the preferred README for a repository.This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;- **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media type.- **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub&apos;s open-source [Markup library](https://github.com/github/markup).
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Ayllu.Github.Client.Repos.Item.Item.Readme.ReadmeRequestBuilder.ReadmeRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Ayllu.Github.Client.Repos.Item.Item.Readme.ReadmeRequestBuilder.ReadmeRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Ayllu.Github.Client.Repos.Item.Item.Readme.ReadmeRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Ayllu.Github.Client.Repos.Item.Item.Readme.ReadmeRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Ayllu.Github.Client.Repos.Item.Item.Readme.ReadmeRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Gets the preferred README for a repository.This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;- **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media type.- **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub&apos;s open-source [Markup library](https://github.com/github/markup).
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ReadmeRequestBuilderGetQueryParameters 
        {
            /// <summary>The name of the commit/branch/tag. Default: the repositoryâ€™s default branch.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("ref")]
            public string? Ref { get; set; }
#nullable restore
#else
            [QueryParameter("ref")]
            public string Ref { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ReadmeRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Ayllu.Github.Client.Repos.Item.Item.Readme.ReadmeRequestBuilder.ReadmeRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
