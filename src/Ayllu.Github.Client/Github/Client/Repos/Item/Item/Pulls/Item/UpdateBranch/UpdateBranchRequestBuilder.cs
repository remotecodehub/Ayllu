// <auto-generated/>
#pragma warning disable CS0618
using Ayllu.Github.Client.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Ayllu.Github.Client.Repos.Item.Item.Pulls.Item.UpdateBranch
{
    /// <summary>
    /// Builds and executes requests for operations under \repos\{owner-id}\{repo-id}\pulls\{pull_number}\update-branch
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class UpdateBranchRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Ayllu.Github.Client.Repos.Item.Item.Pulls.Item.UpdateBranch.UpdateBranchRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UpdateBranchRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/repos/{owner%2Did}/{repo%2Did}/pulls/{pull_number}/update-branch", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Ayllu.Github.Client.Repos.Item.Item.Pulls.Item.UpdateBranch.UpdateBranchRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UpdateBranchRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/repos/{owner%2Did}/{repo%2Did}/pulls/{pull_number}/update-branch", rawUrl)
        {
        }
        /// <summary>
        /// Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.Note: If making a request on behalf of a GitHub App you must also have permissions to write the contents of the head repository.
        /// API method documentation <see href="https://docs.github.com/rest/pulls/pulls#update-a-pull-request-branch" />
        /// </summary>
        /// <returns>A <see cref="global::Ayllu.Github.Client.Repos.Item.Item.Pulls.Item.UpdateBranch.UpdateBranchPutResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Ayllu.Github.Client.Models.BasicError">When receiving a 403 status code</exception>
        /// <exception cref="global::Ayllu.Github.Client.Models.ValidationError">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Ayllu.Github.Client.Repos.Item.Item.Pulls.Item.UpdateBranch.UpdateBranchPutResponse?> PutAsUpdateBranchPutResponseAsync(global::Ayllu.Github.Client.Repos.Item.Item.Pulls.Item.UpdateBranch.UpdateBranchPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Ayllu.Github.Client.Repos.Item.Item.Pulls.Item.UpdateBranch.UpdateBranchPutResponse> PutAsUpdateBranchPutResponseAsync(global::Ayllu.Github.Client.Repos.Item.Item.Pulls.Item.UpdateBranch.UpdateBranchPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "403", global::Ayllu.Github.Client.Models.BasicError.CreateFromDiscriminatorValue },
                { "422", global::Ayllu.Github.Client.Models.ValidationError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Ayllu.Github.Client.Repos.Item.Item.Pulls.Item.UpdateBranch.UpdateBranchPutResponse>(requestInfo, global::Ayllu.Github.Client.Repos.Item.Item.Pulls.Item.UpdateBranch.UpdateBranchPutResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.Note: If making a request on behalf of a GitHub App you must also have permissions to write the contents of the head repository.
        /// API method documentation <see href="https://docs.github.com/rest/pulls/pulls#update-a-pull-request-branch" />
        /// </summary>
        /// <returns>A <see cref="global::Ayllu.Github.Client.Repos.Item.Item.Pulls.Item.UpdateBranch.UpdateBranchResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Ayllu.Github.Client.Models.BasicError">When receiving a 403 status code</exception>
        /// <exception cref="global::Ayllu.Github.Client.Models.ValidationError">When receiving a 422 status code</exception>
        [Obsolete("This method is obsolete. Use PutAsUpdateBranchPutResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Ayllu.Github.Client.Repos.Item.Item.Pulls.Item.UpdateBranch.UpdateBranchResponse?> PutAsync(global::Ayllu.Github.Client.Repos.Item.Item.Pulls.Item.UpdateBranch.UpdateBranchPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Ayllu.Github.Client.Repos.Item.Item.Pulls.Item.UpdateBranch.UpdateBranchResponse> PutAsync(global::Ayllu.Github.Client.Repos.Item.Item.Pulls.Item.UpdateBranch.UpdateBranchPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "403", global::Ayllu.Github.Client.Models.BasicError.CreateFromDiscriminatorValue },
                { "422", global::Ayllu.Github.Client.Models.ValidationError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Ayllu.Github.Client.Repos.Item.Item.Pulls.Item.UpdateBranch.UpdateBranchResponse>(requestInfo, global::Ayllu.Github.Client.Repos.Item.Item.Pulls.Item.UpdateBranch.UpdateBranchResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.Note: If making a request on behalf of a GitHub App you must also have permissions to write the contents of the head repository.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::Ayllu.Github.Client.Repos.Item.Item.Pulls.Item.UpdateBranch.UpdateBranchPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::Ayllu.Github.Client.Repos.Item.Item.Pulls.Item.UpdateBranch.UpdateBranchPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Ayllu.Github.Client.Repos.Item.Item.Pulls.Item.UpdateBranch.UpdateBranchRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Ayllu.Github.Client.Repos.Item.Item.Pulls.Item.UpdateBranch.UpdateBranchRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Ayllu.Github.Client.Repos.Item.Item.Pulls.Item.UpdateBranch.UpdateBranchRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class UpdateBranchRequestBuilderPutRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
