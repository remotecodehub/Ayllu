// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Ayllu.Github.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SecretScanningLocation : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The details property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Ayllu.Github.Client.Models.SecretScanningLocation.SecretScanningLocation_details? Details { get; set; }
#nullable restore
#else
        public global::Ayllu.Github.Client.Models.SecretScanningLocation.SecretScanningLocation_details Details { get; set; }
#endif
        /// <summary>The location type. Because secrets may be found in different types of resources (ie. code, comments, issues, pull requests, discussions), this field identifies the type of resource where the secret was found.</summary>
        public global::Ayllu.Github.Client.Models.SecretScanningLocation_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocation"/> and sets the default values.
        /// </summary>
        public SecretScanningLocation()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocation"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Ayllu.Github.Client.Models.SecretScanningLocation CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Ayllu.Github.Client.Models.SecretScanningLocation();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "details", n => { Details = n.GetObjectValue<global::Ayllu.Github.Client.Models.SecretScanningLocation.SecretScanningLocation_details>(global::Ayllu.Github.Client.Models.SecretScanningLocation.SecretScanningLocation_details.CreateFromDiscriminatorValue); } },
                { "type", n => { Type = n.GetEnumValue<global::Ayllu.Github.Client.Models.SecretScanningLocation_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Ayllu.Github.Client.Models.SecretScanningLocation.SecretScanningLocation_details>("details", Details);
            writer.WriteEnumValue<global::Ayllu.Github.Client.Models.SecretScanningLocation_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationCommit"/>, <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationDiscussionBody"/>, <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationDiscussionComment"/>, <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationDiscussionTitle"/>, <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationIssueBody"/>, <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationIssueComment"/>, <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationIssueTitle"/>, <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestBody"/>, <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestComment"/>, <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestReview"/>, <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestReviewComment"/>, <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestTitle"/>, <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationWikiCommit"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SecretScanningLocation_details : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationCommit"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Ayllu.Github.Client.Models.SecretScanningLocationCommit? SecretScanningLocationCommit { get; set; }
#nullable restore
#else
            public global::Ayllu.Github.Client.Models.SecretScanningLocationCommit SecretScanningLocationCommit { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationDiscussionBody"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Ayllu.Github.Client.Models.SecretScanningLocationDiscussionBody? SecretScanningLocationDiscussionBody { get; set; }
#nullable restore
#else
            public global::Ayllu.Github.Client.Models.SecretScanningLocationDiscussionBody SecretScanningLocationDiscussionBody { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationDiscussionComment"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Ayllu.Github.Client.Models.SecretScanningLocationDiscussionComment? SecretScanningLocationDiscussionComment { get; set; }
#nullable restore
#else
            public global::Ayllu.Github.Client.Models.SecretScanningLocationDiscussionComment SecretScanningLocationDiscussionComment { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationDiscussionTitle"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Ayllu.Github.Client.Models.SecretScanningLocationDiscussionTitle? SecretScanningLocationDiscussionTitle { get; set; }
#nullable restore
#else
            public global::Ayllu.Github.Client.Models.SecretScanningLocationDiscussionTitle SecretScanningLocationDiscussionTitle { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationIssueBody"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Ayllu.Github.Client.Models.SecretScanningLocationIssueBody? SecretScanningLocationIssueBody { get; set; }
#nullable restore
#else
            public global::Ayllu.Github.Client.Models.SecretScanningLocationIssueBody SecretScanningLocationIssueBody { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationIssueComment"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Ayllu.Github.Client.Models.SecretScanningLocationIssueComment? SecretScanningLocationIssueComment { get; set; }
#nullable restore
#else
            public global::Ayllu.Github.Client.Models.SecretScanningLocationIssueComment SecretScanningLocationIssueComment { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationIssueTitle"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Ayllu.Github.Client.Models.SecretScanningLocationIssueTitle? SecretScanningLocationIssueTitle { get; set; }
#nullable restore
#else
            public global::Ayllu.Github.Client.Models.SecretScanningLocationIssueTitle SecretScanningLocationIssueTitle { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestBody"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestBody? SecretScanningLocationPullRequestBody { get; set; }
#nullable restore
#else
            public global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestBody SecretScanningLocationPullRequestBody { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestComment"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestComment? SecretScanningLocationPullRequestComment { get; set; }
#nullable restore
#else
            public global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestComment SecretScanningLocationPullRequestComment { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestReview"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestReview? SecretScanningLocationPullRequestReview { get; set; }
#nullable restore
#else
            public global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestReview SecretScanningLocationPullRequestReview { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestReviewComment"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestReviewComment? SecretScanningLocationPullRequestReviewComment { get; set; }
#nullable restore
#else
            public global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestReviewComment SecretScanningLocationPullRequestReviewComment { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestTitle"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestTitle? SecretScanningLocationPullRequestTitle { get; set; }
#nullable restore
#else
            public global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestTitle SecretScanningLocationPullRequestTitle { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocationWikiCommit"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Ayllu.Github.Client.Models.SecretScanningLocationWikiCommit? SecretScanningLocationWikiCommit { get; set; }
#nullable restore
#else
            public global::Ayllu.Github.Client.Models.SecretScanningLocationWikiCommit SecretScanningLocationWikiCommit { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Ayllu.Github.Client.Models.SecretScanningLocation.SecretScanningLocation_details"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Ayllu.Github.Client.Models.SecretScanningLocation.SecretScanningLocation_details CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Ayllu.Github.Client.Models.SecretScanningLocation.SecretScanningLocation_details();
                if("secret-scanning-location-commit".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.SecretScanningLocationCommit = new global::Ayllu.Github.Client.Models.SecretScanningLocationCommit();
                }
                else if("secret-scanning-location-discussion-body".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.SecretScanningLocationDiscussionBody = new global::Ayllu.Github.Client.Models.SecretScanningLocationDiscussionBody();
                }
                else if("secret-scanning-location-discussion-comment".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.SecretScanningLocationDiscussionComment = new global::Ayllu.Github.Client.Models.SecretScanningLocationDiscussionComment();
                }
                else if("secret-scanning-location-discussion-title".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.SecretScanningLocationDiscussionTitle = new global::Ayllu.Github.Client.Models.SecretScanningLocationDiscussionTitle();
                }
                else if("secret-scanning-location-issue-body".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.SecretScanningLocationIssueBody = new global::Ayllu.Github.Client.Models.SecretScanningLocationIssueBody();
                }
                else if("secret-scanning-location-issue-comment".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.SecretScanningLocationIssueComment = new global::Ayllu.Github.Client.Models.SecretScanningLocationIssueComment();
                }
                else if("secret-scanning-location-issue-title".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.SecretScanningLocationIssueTitle = new global::Ayllu.Github.Client.Models.SecretScanningLocationIssueTitle();
                }
                else if("secret-scanning-location-pull-request-body".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.SecretScanningLocationPullRequestBody = new global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestBody();
                }
                else if("secret-scanning-location-pull-request-comment".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.SecretScanningLocationPullRequestComment = new global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestComment();
                }
                else if("secret-scanning-location-pull-request-review".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.SecretScanningLocationPullRequestReview = new global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestReview();
                }
                else if("secret-scanning-location-pull-request-review-comment".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.SecretScanningLocationPullRequestReviewComment = new global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestReviewComment();
                }
                else if("secret-scanning-location-pull-request-title".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.SecretScanningLocationPullRequestTitle = new global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestTitle();
                }
                else if("secret-scanning-location-wiki-commit".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.SecretScanningLocationWikiCommit = new global::Ayllu.Github.Client.Models.SecretScanningLocationWikiCommit();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(SecretScanningLocationCommit != null)
                {
                    return SecretScanningLocationCommit.GetFieldDeserializers();
                }
                else if(SecretScanningLocationDiscussionBody != null)
                {
                    return SecretScanningLocationDiscussionBody.GetFieldDeserializers();
                }
                else if(SecretScanningLocationDiscussionComment != null)
                {
                    return SecretScanningLocationDiscussionComment.GetFieldDeserializers();
                }
                else if(SecretScanningLocationDiscussionTitle != null)
                {
                    return SecretScanningLocationDiscussionTitle.GetFieldDeserializers();
                }
                else if(SecretScanningLocationIssueBody != null)
                {
                    return SecretScanningLocationIssueBody.GetFieldDeserializers();
                }
                else if(SecretScanningLocationIssueComment != null)
                {
                    return SecretScanningLocationIssueComment.GetFieldDeserializers();
                }
                else if(SecretScanningLocationIssueTitle != null)
                {
                    return SecretScanningLocationIssueTitle.GetFieldDeserializers();
                }
                else if(SecretScanningLocationPullRequestBody != null)
                {
                    return SecretScanningLocationPullRequestBody.GetFieldDeserializers();
                }
                else if(SecretScanningLocationPullRequestComment != null)
                {
                    return SecretScanningLocationPullRequestComment.GetFieldDeserializers();
                }
                else if(SecretScanningLocationPullRequestReview != null)
                {
                    return SecretScanningLocationPullRequestReview.GetFieldDeserializers();
                }
                else if(SecretScanningLocationPullRequestReviewComment != null)
                {
                    return SecretScanningLocationPullRequestReviewComment.GetFieldDeserializers();
                }
                else if(SecretScanningLocationPullRequestTitle != null)
                {
                    return SecretScanningLocationPullRequestTitle.GetFieldDeserializers();
                }
                else if(SecretScanningLocationWikiCommit != null)
                {
                    return SecretScanningLocationWikiCommit.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(SecretScanningLocationCommit != null)
                {
                    writer.WriteObjectValue<global::Ayllu.Github.Client.Models.SecretScanningLocationCommit>(null, SecretScanningLocationCommit);
                }
                else if(SecretScanningLocationDiscussionBody != null)
                {
                    writer.WriteObjectValue<global::Ayllu.Github.Client.Models.SecretScanningLocationDiscussionBody>(null, SecretScanningLocationDiscussionBody);
                }
                else if(SecretScanningLocationDiscussionComment != null)
                {
                    writer.WriteObjectValue<global::Ayllu.Github.Client.Models.SecretScanningLocationDiscussionComment>(null, SecretScanningLocationDiscussionComment);
                }
                else if(SecretScanningLocationDiscussionTitle != null)
                {
                    writer.WriteObjectValue<global::Ayllu.Github.Client.Models.SecretScanningLocationDiscussionTitle>(null, SecretScanningLocationDiscussionTitle);
                }
                else if(SecretScanningLocationIssueBody != null)
                {
                    writer.WriteObjectValue<global::Ayllu.Github.Client.Models.SecretScanningLocationIssueBody>(null, SecretScanningLocationIssueBody);
                }
                else if(SecretScanningLocationIssueComment != null)
                {
                    writer.WriteObjectValue<global::Ayllu.Github.Client.Models.SecretScanningLocationIssueComment>(null, SecretScanningLocationIssueComment);
                }
                else if(SecretScanningLocationIssueTitle != null)
                {
                    writer.WriteObjectValue<global::Ayllu.Github.Client.Models.SecretScanningLocationIssueTitle>(null, SecretScanningLocationIssueTitle);
                }
                else if(SecretScanningLocationPullRequestBody != null)
                {
                    writer.WriteObjectValue<global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestBody>(null, SecretScanningLocationPullRequestBody);
                }
                else if(SecretScanningLocationPullRequestComment != null)
                {
                    writer.WriteObjectValue<global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestComment>(null, SecretScanningLocationPullRequestComment);
                }
                else if(SecretScanningLocationPullRequestReview != null)
                {
                    writer.WriteObjectValue<global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestReview>(null, SecretScanningLocationPullRequestReview);
                }
                else if(SecretScanningLocationPullRequestReviewComment != null)
                {
                    writer.WriteObjectValue<global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestReviewComment>(null, SecretScanningLocationPullRequestReviewComment);
                }
                else if(SecretScanningLocationPullRequestTitle != null)
                {
                    writer.WriteObjectValue<global::Ayllu.Github.Client.Models.SecretScanningLocationPullRequestTitle>(null, SecretScanningLocationPullRequestTitle);
                }
                else if(SecretScanningLocationWikiCommit != null)
                {
                    writer.WriteObjectValue<global::Ayllu.Github.Client.Models.SecretScanningLocationWikiCommit>(null, SecretScanningLocationWikiCommit);
                }
            }
        }
    }
}
#pragma warning restore CS0618
