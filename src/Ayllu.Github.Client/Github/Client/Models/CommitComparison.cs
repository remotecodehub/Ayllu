// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Ayllu.Github.Client.Models
{
    /// <summary>
    /// Commit Comparison
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CommitComparison : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The ahead_by property</summary>
        public int? AheadBy { get; set; }
        /// <summary>Commit</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Ayllu.Github.Client.Models.Commit? BaseCommit { get; set; }
#nullable restore
#else
        public global::Ayllu.Github.Client.Models.Commit BaseCommit { get; set; }
#endif
        /// <summary>The behind_by property</summary>
        public int? BehindBy { get; set; }
        /// <summary>The commits property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Ayllu.Github.Client.Models.Commit>? Commits { get; set; }
#nullable restore
#else
        public List<global::Ayllu.Github.Client.Models.Commit> Commits { get; set; }
#endif
        /// <summary>The diff_url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DiffUrl { get; set; }
#nullable restore
#else
        public string DiffUrl { get; set; }
#endif
        /// <summary>The files property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Ayllu.Github.Client.Models.DiffEntry>? Files { get; set; }
#nullable restore
#else
        public List<global::Ayllu.Github.Client.Models.DiffEntry> Files { get; set; }
#endif
        /// <summary>The html_url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HtmlUrl { get; set; }
#nullable restore
#else
        public string HtmlUrl { get; set; }
#endif
        /// <summary>Commit</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Ayllu.Github.Client.Models.Commit? MergeBaseCommit { get; set; }
#nullable restore
#else
        public global::Ayllu.Github.Client.Models.Commit MergeBaseCommit { get; set; }
#endif
        /// <summary>The patch_url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PatchUrl { get; set; }
#nullable restore
#else
        public string PatchUrl { get; set; }
#endif
        /// <summary>The permalink_url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PermalinkUrl { get; set; }
#nullable restore
#else
        public string PermalinkUrl { get; set; }
#endif
        /// <summary>The status property</summary>
        public global::Ayllu.Github.Client.Models.CommitComparison_status? Status { get; set; }
        /// <summary>The total_commits property</summary>
        public int? TotalCommits { get; set; }
        /// <summary>The url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Ayllu.Github.Client.Models.CommitComparison"/> and sets the default values.
        /// </summary>
        public CommitComparison()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Ayllu.Github.Client.Models.CommitComparison"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Ayllu.Github.Client.Models.CommitComparison CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Ayllu.Github.Client.Models.CommitComparison();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ahead_by", n => { AheadBy = n.GetIntValue(); } },
                { "base_commit", n => { BaseCommit = n.GetObjectValue<global::Ayllu.Github.Client.Models.Commit>(global::Ayllu.Github.Client.Models.Commit.CreateFromDiscriminatorValue); } },
                { "behind_by", n => { BehindBy = n.GetIntValue(); } },
                { "commits", n => { Commits = n.GetCollectionOfObjectValues<global::Ayllu.Github.Client.Models.Commit>(global::Ayllu.Github.Client.Models.Commit.CreateFromDiscriminatorValue)?.AsList(); } },
                { "diff_url", n => { DiffUrl = n.GetStringValue(); } },
                { "files", n => { Files = n.GetCollectionOfObjectValues<global::Ayllu.Github.Client.Models.DiffEntry>(global::Ayllu.Github.Client.Models.DiffEntry.CreateFromDiscriminatorValue)?.AsList(); } },
                { "html_url", n => { HtmlUrl = n.GetStringValue(); } },
                { "merge_base_commit", n => { MergeBaseCommit = n.GetObjectValue<global::Ayllu.Github.Client.Models.Commit>(global::Ayllu.Github.Client.Models.Commit.CreateFromDiscriminatorValue); } },
                { "patch_url", n => { PatchUrl = n.GetStringValue(); } },
                { "permalink_url", n => { PermalinkUrl = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Ayllu.Github.Client.Models.CommitComparison_status>(); } },
                { "total_commits", n => { TotalCommits = n.GetIntValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("ahead_by", AheadBy);
            writer.WriteObjectValue<global::Ayllu.Github.Client.Models.Commit>("base_commit", BaseCommit);
            writer.WriteIntValue("behind_by", BehindBy);
            writer.WriteCollectionOfObjectValues<global::Ayllu.Github.Client.Models.Commit>("commits", Commits);
            writer.WriteStringValue("diff_url", DiffUrl);
            writer.WriteCollectionOfObjectValues<global::Ayllu.Github.Client.Models.DiffEntry>("files", Files);
            writer.WriteStringValue("html_url", HtmlUrl);
            writer.WriteObjectValue<global::Ayllu.Github.Client.Models.Commit>("merge_base_commit", MergeBaseCommit);
            writer.WriteStringValue("patch_url", PatchUrl);
            writer.WriteStringValue("permalink_url", PermalinkUrl);
            writer.WriteEnumValue<global::Ayllu.Github.Client.Models.CommitComparison_status>("status", Status);
            writer.WriteIntValue("total_commits", TotalCommits);
            writer.WriteStringValue("url", Url);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
