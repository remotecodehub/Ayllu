// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Ayllu.Github.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CampaignSummary_alert_stats : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The number of closed alerts</summary>
        public int? ClosedCount { get; set; }
        /// <summary>The number of in-progress alerts</summary>
        public int? InProgressCount { get; set; }
        /// <summary>The number of open alerts</summary>
        public int? OpenCount { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Ayllu.Github.Client.Models.CampaignSummary_alert_stats"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Ayllu.Github.Client.Models.CampaignSummary_alert_stats CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Ayllu.Github.Client.Models.CampaignSummary_alert_stats();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "closed_count", n => { ClosedCount = n.GetIntValue(); } },
                { "in_progress_count", n => { InProgressCount = n.GetIntValue(); } },
                { "open_count", n => { OpenCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("closed_count", ClosedCount);
            writer.WriteIntValue("in_progress_count", InProgressCount);
            writer.WriteIntValue("open_count", OpenCount);
        }
    }
}
#pragma warning restore CS0618
