// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Ayllu.Github.Client.Models
{
    /// <summary>
    /// A Github-hosted hosted runner.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ActionsHostedRunner : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The unique identifier of the hosted runner.</summary>
        public int? Id { get; set; }
        /// <summary>Provides details of a hosted runner image</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Ayllu.Github.Client.Models.NullableActionsHostedRunnerPoolImage? ImageDetails { get; set; }
#nullable restore
#else
        public global::Ayllu.Github.Client.Models.NullableActionsHostedRunnerPoolImage ImageDetails { get; set; }
#endif
        /// <summary>The time at which the runner was last used, in ISO 8601 format.</summary>
        public DateTimeOffset? LastActiveOn { get; set; }
        /// <summary>Provides details of a particular machine spec.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Ayllu.Github.Client.Models.ActionsHostedRunnerMachineSpec? MachineSizeDetails { get; set; }
#nullable restore
#else
        public global::Ayllu.Github.Client.Models.ActionsHostedRunnerMachineSpec MachineSizeDetails { get; set; }
#endif
        /// <summary>The maximum amount of hosted runners. Runners will not scale automatically above this number. Use this setting to limit your cost.</summary>
        public int? MaximumRunners { get; set; }
        /// <summary>The name of the hosted runner.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The operating system of the image.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Platform { get; set; }
#nullable restore
#else
        public string Platform { get; set; }
#endif
        /// <summary>Whether public IP is enabled for the hosted runners.</summary>
        public bool? PublicIpEnabled { get; set; }
        /// <summary>The public IP ranges when public IP is enabled for the hosted runners.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Ayllu.Github.Client.Models.PublicIp>? PublicIps { get; set; }
#nullable restore
#else
        public List<global::Ayllu.Github.Client.Models.PublicIp> PublicIps { get; set; }
#endif
        /// <summary>The unique identifier of the group that the hosted runner belongs to.</summary>
        public int? RunnerGroupId { get; set; }
        /// <summary>The status of the runner.</summary>
        public global::Ayllu.Github.Client.Models.ActionsHostedRunner_status? Status { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Ayllu.Github.Client.Models.ActionsHostedRunner"/> and sets the default values.
        /// </summary>
        public ActionsHostedRunner()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Ayllu.Github.Client.Models.ActionsHostedRunner"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Ayllu.Github.Client.Models.ActionsHostedRunner CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Ayllu.Github.Client.Models.ActionsHostedRunner();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "id", n => { Id = n.GetIntValue(); } },
                { "image_details", n => { ImageDetails = n.GetObjectValue<global::Ayllu.Github.Client.Models.NullableActionsHostedRunnerPoolImage>(global::Ayllu.Github.Client.Models.NullableActionsHostedRunnerPoolImage.CreateFromDiscriminatorValue); } },
                { "last_active_on", n => { LastActiveOn = n.GetDateTimeOffsetValue(); } },
                { "machine_size_details", n => { MachineSizeDetails = n.GetObjectValue<global::Ayllu.Github.Client.Models.ActionsHostedRunnerMachineSpec>(global::Ayllu.Github.Client.Models.ActionsHostedRunnerMachineSpec.CreateFromDiscriminatorValue); } },
                { "maximum_runners", n => { MaximumRunners = n.GetIntValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "platform", n => { Platform = n.GetStringValue(); } },
                { "public_ip_enabled", n => { PublicIpEnabled = n.GetBoolValue(); } },
                { "public_ips", n => { PublicIps = n.GetCollectionOfObjectValues<global::Ayllu.Github.Client.Models.PublicIp>(global::Ayllu.Github.Client.Models.PublicIp.CreateFromDiscriminatorValue)?.AsList(); } },
                { "runner_group_id", n => { RunnerGroupId = n.GetIntValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Ayllu.Github.Client.Models.ActionsHostedRunner_status>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("id", Id);
            writer.WriteObjectValue<global::Ayllu.Github.Client.Models.NullableActionsHostedRunnerPoolImage>("image_details", ImageDetails);
            writer.WriteDateTimeOffsetValue("last_active_on", LastActiveOn);
            writer.WriteObjectValue<global::Ayllu.Github.Client.Models.ActionsHostedRunnerMachineSpec>("machine_size_details", MachineSizeDetails);
            writer.WriteIntValue("maximum_runners", MaximumRunners);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("platform", Platform);
            writer.WriteBoolValue("public_ip_enabled", PublicIpEnabled);
            writer.WriteCollectionOfObjectValues<global::Ayllu.Github.Client.Models.PublicIp>("public_ips", PublicIps);
            writer.WriteIntValue("runner_group_id", RunnerGroupId);
            writer.WriteEnumValue<global::Ayllu.Github.Client.Models.ActionsHostedRunner_status>("status", Status);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
